install.packages("mgcv")
library(mgcv)
fit <- bam(called ~ s(px, py, k = 50),
family = binomial,
data = strikes)
strikeFX()
strikeFX(strikes,
density1 = list(called == 1),
density2 = list(called == 0))
facet_grid(. ~ stand)
strikeFX(strikes,
density1 = list(called = 1),
density2 = list(called = 0))
facet_grid(. ~ stand)
strikeFX(strikes,
density1 = list(called = 1),
density2 = list(called = 0)) +
facet_grid(. ~ stand)
table(strikes$des)
?strikeFX
strikeFX(strikes, geom = "tile",
density1 = list(called = 1),
density2 = list(called = 0)) +
facet_grid(. ~ stand)
strikeFX(strikes,
density1 = list(called = 1),
density2 = list(called = 0)) +
facet_grid(. ~ stand)
strikeFX(strikes, geom = "point", colour = "called") +
facet_grid(. ~ stand)
strikeFX(strikes, geom = "point", colour = ~called) +
facet_grid(. ~ stand)
strikeFX(strikes, geom = "point", colour = called) +
facet_grid(. ~ stand)
strikeFX(strikes, geom = "point", colour = strikes$called) +
facet_grid(. ~ stand)
head(strikes)
strikeFX(strikes, geom = "point", color = "called") +
facet_grid(. ~ stand)
strikeFX(strikes, geom = "point", color = "called") +
facet_grid(. ~ stand) +
theme_hc()
?scale_x_date
?position_jitter
forehand %>%
ggplot(aes(y = total, x = date, group = event, fill = event)) +
geom_bar(stat = "identity", width = 0.8) +
geom_text(aes(label = round(total, 0), y = label.y), size = 2.5, position = position_jitter(width = 0, height = 1)) +
scale_y_continuous("Shot Load Index", breaks = scales::pretty_breaks(n = 5)) +
expand_limits(y = 0) +
scale_x_date("", date_breaks = "4 days", date_label = "%b %d") +
scale_fill_manual("", values = colors) +
theme_hc() +
theme(text = element_text(size = 16), axis.text.x = element_text(size = 10))
forehand$label.y <- max(forehand$total) * 1.05
forehand %>%
ggplot(aes(y = total, x = date, group = event, fill = event)) +
geom_bar(stat = "identity", width = 0.8) +
geom_text(aes(label = round(total, 0), y = label.y), size = 2.5, position = position_jitter(width = 0, height = 1)) +
scale_y_continuous("Shot Load Index", breaks = scales::pretty_breaks(n = 5)) +
expand_limits(y = 0) +
scale_x_date("", date_breaks = "4 days", date_label = "%b %d") +
scale_fill_manual("", values = colors) +
theme_hc() +
theme(text = element_text(size = 16), axis.text.x = element_text(size = 10))
forehand <- stats %>%
filter(shot == 1, impact.player %in% player_name, !is.na(speed.start)) %>%
group_by(date, event, impact.player) %>%
dplyr::mutate(
speed = speed.start * 3.6
)
forehand <- forehand %>%
group_by(date, event) %>%
dplyr::summarise(
total = sum(round(speed, 0))
)
forehand$label.y <- max(forehand$total) * 1.05
forehand %>%
ggplot(aes(y = total, x = date, group = event, fill = event)) +
geom_bar(stat = "identity", width = 0.8) +
geom_text(aes(label = round(total, 0), y = label.y), size = 2.5, position = position_jitter(width = 0, height = 1)) +
scale_y_continuous("Shot Load Index", breaks = scales::pretty_breaks(n = 5)) +
expand_limits(y = 0) +
scale_x_date("", date_breaks = "4 days", date_label = "%b %d") +
scale_fill_manual("", values = colors) +
theme_hc() +
theme(text = element_text(size = 16), axis.text.x = element_text(size = 10))
forehand <- stats %>%
filter(shot == 1, impact.player %in% player_name, !is.na(speed.start)) %>%
group_by(date, event, impact.player) %>%
dplyr::mutate(
speed = speed.start * 3.6
)
forehand <- forehand %>%
group_by(date, event) %>%
dplyr::summarise(
total = sum(round(speed, 0))
)
forehand$label.y <- max(forehand$total) * 1.05
forehand %>%
ggplot(aes(y = total, x = date, group = event, fill = event)) +
geom_bar(stat = "identity", width = 0.8) +
geom_text(aes(label = round(total, 0), y = label.y), size = 2.5, position = position_jitter(width = 0, height = 1)) +
scale_y_continuous("Shot Load Index", breaks = scales::pretty_breaks(n = 5)) +
expand_limits(y = 0) +
scale_x_date("", date_breaks = "4 days", date_label = "%b %d") +
scale_fill_manual("", values = colors) +
theme_hc() +
theme(text = element_text(size = 16), axis.text.x = element_text(size = 10))
head(forehand)
forehand %>%
ggplot(aes(y = total, x = date, group = event, fill = event)) +
geom_bar(stat = "identity", width = 0.8) +
geom_text(aes(label = round(total, 0), y = label.y), size = 2.5, position = position_jitter(width = 0, height = IQR(forehand$total))) +
scale_y_continuous("Shot Load Index", breaks = scales::pretty_breaks(n = 5)) +
expand_limits(y = 0) +
scale_x_date("", date_breaks = "4 days", date_label = "%b %d") +
scale_fill_manual("", values = colors) +
theme_hc() +
theme(text = element_text(size = 16), axis.text.x = element_text(size = 10))
forehand %>%
ggplot(aes(y = total, x = date, group = event, fill = event)) +
geom_bar(stat = "identity", width = 0.8) +
geom_text(aes(label = round(total, 0), y = label.y), size = 2.5, position = position_jitter(width = 0, height = IQR(forehand$total) / 3)) +
scale_y_continuous("Shot Load Index", breaks = scales::pretty_breaks(n = 5)) +
expand_limits(y = 0) +
scale_x_date("", date_breaks = "4 days", date_label = "%b %d") +
scale_fill_manual("", values = colors) +
theme_hc() +
theme(text = element_text(size = 16), axis.text.x = element_text(size = 10))
AIC(fit, fit1, fit2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggthemes)
library(tidyr)
library(dplyr)
library(knitr)
library(kableExtra)
library(GIGEngine)
library(scales)
colors <- c("#0091D2", "#F7981D", "#B9D700")
formatter <- function(x)
formatC(x, format = 'f', flag='0', digits = 1)
make_label <- function(x){
percent <- c(0, x[2:length(x)]/x[1])
percent <- ifelse(percent < 1,  paste("-", round((1 - percent) * 100, 1), "%", sep = ""),
paste("+", round((percent - 1) * 100, 1), "%", sep = ""))
label <- paste(formatter(x), ",\n", paste(percent, "\nvs Hard"))
label[1] <- formatter(x[1])
label
}
inf.mean <- function(x){
if(length(x) == 0 | all(is.na(x)))
NA
else
mean(x, na.rm = T)
}
inf.min <- function(x){
if(length(x) == 0 | all(is.na(x)))
NA
else
min(x, na.rm = T)
}
inf.max <- function(x){
if(length(x) == 0 | all(is.na(x)))
NA
else
max(x, na.rm = T)
}
player_name <- params$player_name
stat_files <- c(
"~/Software/GIGEngine/output/mens/stats.RData",
"~/Software/GIGEngine/aoseries/mens2017/stats.RData"
)
time_files <- c(
"~/Software/GIGEngine/output/mens/times.RData",
"~/Software/GIGEngine/aoseries/mens2017/times.RData"
)
stats <- do.call(rbind, lapply(stat_files, function(x){
load(x)
# Filter time period
matchids <- unique(stats$matchid[stats$server == player_name])
stats <- stats %>% filter(matchid %in% matchids)
stats
}))
times <- do.call(rbind, lapply(time_files, function(x){
load(x)
# Filter time period
matchids <- unique(times$matchid[times$server == player_name])
times <- times %>% filter(matchid %in% matchids)
times
}))
matchids <- unique(grep("^MS|Brisbane", stats$matchid, val = T))
stats <- stats %>% filter(matchid %in% matchids)
times <- times %>% filter(matchid %in% matchids)
stats$impact.player <- toupper(gsub(" ", "", as.character(stats$impact.player)))
stats$server <- toupper(gsub(" ", "", as.character(stats$server)))
stats$receiver <- toupper(gsub(" ", "", as.character(stats$receiver)))
times$server <- toupper(gsub(" ", "", as.character(times$server)))
times$receiver <-  toupper(gsub(" ", "", as.character(times$receiver)))
point <- do.call("rbind", lapply(split(stats, stats$matchid), function(x) point_data(x, T)))
point$server_won <- with(point, (player1 == server & player1.won) | (player2 == server & player2.won))
stats <- merge(stats, point %>% select(matchid, serveid, server_won), by = c("matchid", "serveid"), all.x = T)
times <- merge(times, point %>% select(matchid, serveid, server_won),  by = c("matchid", "serveid"), all.x = T)
# Exclude NA stats
stats <- stats %>% filter(!is.na(server_won))
# ASSIGN DATES
dates <- c (
"Brisbane2017_F_Dimitrov_Nishikori" = "20170108",
"Brisbane2017_SF_Nishikori_Wawrinka" = "20170107",
"Brisbane2017_2nd_Nishikori_Donaldson" = "20170103",
"MS116" = "20170126",
"MS208" = "20170118",
"MS304" = "20170120",
"MS402"= "20170122"
)
stats$date <- ymd(dates[stats$matchid])
stats$event <- ifelse(grepl("Brisbane", stats$matchid), "Brisbane", "Aus Open")
# COD
get_position_stats <- function(file, mens, matchcode = NULL){
print(file)
xml <- tryCatch(xmlToList(file), error = function(x) NA)
if(is.logical(xml)){
warning("XML couldn't be read")
return(NULL)
}
# Check if empty
arcs <- as.numeric(gsub("\n", "", xml$NumArcs))
if(length(arcs) == 0 || arcs == 0)
return(NULL)
stats <- get_rally(xml, file, matchcode)
if(is.null(stats))
return(NULL)
else{
# If the time for trj are not valid
position <- tryCatch(assign_shot(parse_position(xml), stats),
error = function(x) NA)
if(class(position) == "logical" || nrow(position) == 0){
NULL
}
else{
if(stats$server.at.positive[1]){
names(position) <- sub("player2", "server", names(stats))
names(position) <- sub("player1", "receiver", names(stats))
position$server <- stats$server[1]
position$receiver <- stats$receiver[1]
}
else{
names(position) <- sub("player1", "server", names(position))
names(position) <- sub("player2", "receiver", names(position))
position$server <- stats$server[1]
position$receiver <- stats$receiver[1]
}
position <- rbind(
position %>% select(secs, player = server, player.x = server.x, player.y = server.y, player.instant.speed = server.instant.speed, player.instant.accel = server.instant.accel, shot),
position %>% select(secs, player = receiver, player.x = receiver.x, player.y = receiver.y, player.instant.speed = receiver.instant.speed, player.instant.accel = receiver.instant.accel, shot)
)
position$serveid <- stats$serveid[1]
position$matchid <- matchcode
position
}
}
}
dir <- c(
"~/Project/AO2017/data/Processed/",
"/Users/skovalchik/Data/HawkeyeComplete/AOSeries/Brisbane2017/MS",
"/Users/skovalchik/Data/HawkeyeComplete/AOSeries/Hopman2017/MS"
)
# dir <- lapply(dir, function(x) list.files(x, full = T))
# dir <- grep(paste(gsub("Brisbane2017_", "", matchids), collapse = "|"), unlist(dir), val = T)
#
# dir <- dir[!grepl("zip", dir)]
#
# files <-  lapply(dir, function(y) unlist(lapply(y, function(x) {
#
# 	if(grepl("AO2017", x) & !grepl("MS304", x)){
# 		x <- file.path(x, "Hawkeye/Processed")
# 		if(file.exists(x))
# 			list.files(x, full = T)
# 		else
# 			NULL
# 	}
# 	else{
# 		dir <- list.files(x, full = T)
#
# 		if(length(dir) == 1)
# 			grep("xml", list.files(dir, full = T), val = T)
# 		else
# 			grep("xml", list.files(x, full = T), val = T)
# 	 }
# 	}))
# )
#
# files <- unlist(files)
#
#
# matchid <- function(x) {
#   if(grepl("Brisbane", x))
#     paste("Brisbane2017", sub("(.*MS/)(.*)(/[0-9].*)", "\\2", x), sep = "_")
#   else
#      sub("(.*)(MS[0-9][0-9][0-9])(/.*)", "\\2", x)
# }
#
# position <- do.call("rbind", lapply(files, function(x) tryCatch(get_position_stats(x, T, matchid(x)), error = function(z) NULL)))
#
# position <- position %>% filter(player == player_name)
#
# position <- 	position %>%
# 	dplyr::mutate(
# 		set = as.numeric(substr(serveid, 1, 1)),
# 		game = as.numeric(substr(serveid, 3, 4)),
# 		point = as.numeric(substr(serveid, 6, 7))
# 	)
#
# position$date <- ymd(dates[position$matchid])
#
# position$event <- ifelse(grepl("Brisbane", position$matchid), "Brisbane", "Aus Open")
machids
matchids
stat_files <- c(
"~/Software/GIGEngine/output/mens/stats.RData",
"~/Software/GIGEngine/aoseries/mens2017/stats.RData"
)
time_files <- c(
"~/Software/GIGEngine/output/mens/times.RData",
"~/Software/GIGEngine/aoseries/mens2017/times.RData"
)
load(time_files[1])
unique(grep("zverev", times$server, val = T))
unique(grep("zverev", times$server, ignore = T, val = T))
load(time_files[2])
unique(grep("zverev", times$server, ignore = T, val = T))
stats <- do.call(rbind, lapply(stat_files, function(x){
load(x)
# Filter time period
stats$impact.player <- toupper(gsub(" ", "", as.character(stats$impact.player)))
stats$server <- toupper(gsub(" ", "", as.character(stats$server)))
stats$receiver <- toupper(gsub(" ", "", as.character(stats$receiver)))
matchids <- unique(stats$matchid[stats$server == player_name])
stats <- stats %>% filter(matchid %in% matchids)
stats
}))
times <- do.call(rbind, lapply(time_files, function(x){
load(x)
# Filter time period
times$server <- toupper(gsub(" ", "", as.character(times$server)))
times$receiver <-  toupper(gsub(" ", "", as.character(times$receiver)))
matchids <- unique(times$matchid[times$server == player_name])
times <- times %>% filter(matchid %in% matchids)
times
}))
matchids <- unique(grep("^MS|Brisbane", stats$matchid, val = T))
stats <- stats %>% filter(matchid %in% matchids)
times <- times %>% filter(matchid %in% matchids)
stat_files <- c(
"~/Software/GIGEngine/output/mens/stats.RData",
"~/Software/GIGEngine/aoseries/mens2017/stats.RData"
)
time_files <- c(
"~/Software/GIGEngine/output/mens/times.RData",
"~/Software/GIGEngine/aoseries/mens2017/times.RData"
)
stats <- do.call(rbind, lapply(stat_files, function(x){
load(x)
# Filter time period
stats$impact.player <- toupper(gsub(" ", "", as.character(stats$impact.player)))
stats$server <- toupper(gsub(" ", "", as.character(stats$server)))
stats$receiver <- toupper(gsub(" ", "", as.character(stats$receiver)))
matchids <- unique(stats$matchid[stats$server == player_name])
stats <- stats %>% filter(matchid %in% matchids)
stats
}))
times <- do.call(rbind, lapply(time_files, function(x){
load(x)
# Filter time period
times$server <- toupper(gsub(" ", "", as.character(times$server)))
times$receiver <-  toupper(gsub(" ", "", as.character(times$receiver)))
matchids <- unique(times$matchid[times$server == player_name])
times <- times %>% filter(matchid %in% matchids)
times
}))
matchids <- unique(grep("^MS|Brisbane|Hopman", stats$matchid, val = T))
matchids
# COD
get_position_stats <- function(file, mens, matchcode = NULL){
print(file)
xml <- tryCatch(xmlToList(file), error = function(x) NA)
if(is.logical(xml)){
warning("XML couldn't be read")
return(NULL)
}
# Check if empty
arcs <- as.numeric(gsub("\n", "", xml$NumArcs))
if(length(arcs) == 0 || arcs == 0)
return(NULL)
stats <- get_rally(xml, file, matchcode)
if(is.null(stats))
return(NULL)
else{
# If the time for trj are not valid
position <- tryCatch(assign_shot(parse_position(xml), stats),
error = function(x) NA)
if(class(position) == "logical" || nrow(position) == 0){
NULL
}
else{
if(stats$server.at.positive[1]){
names(position) <- sub("player2", "server", names(stats))
names(position) <- sub("player1", "receiver", names(stats))
position$server <- stats$server[1]
position$receiver <- stats$receiver[1]
}
else{
names(position) <- sub("player1", "server", names(position))
names(position) <- sub("player2", "receiver", names(position))
position$server <- stats$server[1]
position$receiver <- stats$receiver[1]
}
position <- rbind(
position %>% select(secs, player = server, player.x = server.x, player.y = server.y, player.instant.speed = server.instant.speed, player.instant.accel = server.instant.accel, shot),
position %>% select(secs, player = receiver, player.x = receiver.x, player.y = receiver.y, player.instant.speed = receiver.instant.speed, player.instant.accel = receiver.instant.accel, shot)
)
position$serveid <- stats$serveid[1]
position$matchid <- matchcode
position
}
}
}
dir <- c(
"~/Project/AO2017/data/Processed/",
"/Users/skovalchik/Data/HawkeyeComplete/AOSeries/Brisbane2017/MS",
"/Users/skovalchik/Data/HawkeyeComplete/AOSeries/Hopman2017/MS"
)
dir <- lapply(dir, function(x) list.files(x, full = T))
dir <- grep(paste(gsub("Hopman2017_", "", matchids), collapse = "|"), unlist(dir), val = T)
dir
dir <- c(
"~/Project/AO2017/data/Processed/",
"/Users/skovalchik/Data/HawkeyeComplete/AOSeries/Brisbane2017/MS",
"/Users/skovalchik/Data/HawkeyeComplete/AOSeries/Hopman2017/MS"
)
dir <- lapply(dir, function(x) list.files(x, full = T))
dir
dir <- c(
"~/Project/AO2017/data/Processed/",
"/Users/skovalchik/Data/HawkeyeComplete/AOSeries/Brisbane2017/MS",
"/Users/skovalchik/Data/HawkeyeComplete/AOSeries/HopmanCup2017/MS"
)
dir <- lapply(dir, function(x) list.files(x, full = T))
dir <- grep(paste(gsub("HopmanCup2017_", "", matchids), collapse = "|"), unlist(dir), val = T)
dir
dir <- c(
"~/Project/AO2017/data/Processed/",
"/Users/skovalchik/Data/HawkeyeComplete/AOSeries/Brisbane2017/MS",
"/Users/skovalchik/Data/HawkeyeComplete/AOSeries/HopmanCup2017/MS"
)
dir <- lapply(dir, function(x) list.files(x, full = T))
dir <- grep(paste(gsub("HopmanCup2017_", "", matchids), collapse = "|"), unlist(dir), val = T)
dir <- dir[!grepl("zip", dir)]
files <-  lapply(dir, function(y) unlist(lapply(y, function(x) {
if(grepl("AO2017", x)){
x <- file.path(x, "Hawkeye/Processed")
if(file.exists(x))
list.files(x, full = T)
else
NULL
}
else{
dir <- list.files(x, full = T)
if(length(dir) == 1)
grep("xml", list.files(dir, full = T), val = T)
else
grep("xml", list.files(x, full = T), val = T)
}
}))
)
files <- unlist(files)
matchid <- function(x) {
if(grepl("Hopman", x))
paste("HopmanCup2017", sub("(.*MS/)(.*)(/[0-9].*)", "\\2", x), sep = "_")
else
sub("(.*)(MS[0-9][0-9][0-9])(/.*)", "\\2", x)
}
files <- grep("Gasquet", files, val = T)
files
position <- do.call("rbind", lapply(files, function(x) tryCatch(get_position_stats(x, T, matchid(x)), error = function(z) NULL)))
position <- position %>% filter(player == player_name)
position <- 	position %>%
dplyr::mutate(
set = as.numeric(substr(serveid, 1, 1)),
game = as.numeric(substr(serveid, 3, 4)),
point = as.numeric(substr(serveid, 6, 7))
)
position$date <- ymd(dates[position$matchid])
position$event <- ifelse(grepl("Hopman", position$matchid), "Hopman", "Aus Open")
position$event <- factor(position$event, levels = c("Hopman", "Aus Open"), order = T)
head(position)
matchids
dates
# ASSIGN DATES
dates <- c (
"HopmanCup2017_1stGasquet_A.Zverev" = "20170102",
"HopmanCup2017_RR_A.Zverev_Evans" = "20170107",
"HopmanCup2017_RB_A.Zverev_Federer" = "20170106",
"MS137" = "20170117",
"MS219" = "20170119",
"MS310" = "20170121"
)
position$date <- ymd(dates[position$matchid])
position
player_name
head(position)
